#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>

//NODE STRUCT
typedef struct nod{
    int hp;
    int class;
    int key;
    int ability;
    struct nod* next;
} TNOD;

//GLOBAL VARIABLES
TNOD *last = NULL;
int keyIndex = 1;
int classNr;
int botsNr;

//FUNCTION PROTOTYPE
void addNode();
void deleteNode(int key);
void showInfo();
void showPlayers();
int gameRound();
int RNG(int bound) {
    int num = rand() % bound + 1;
    return num;
}

int main() {
    srand(time(NULL));
    showInfo();
    printf("                    Enter the number of your class: ");
    scanf("%d", &classNr);
    printf("                     Enter the number of enemies: ");
    scanf("%d", &botsNr);
    printf("\n                         Let the battle begin!                          \n");

    for(int i = 1; i <= (botsNr+1); i++)
        addNode();

    while(1)
        if(gameRound())
            break;
}

void addNode(){
    TNOD *nextNode = malloc(sizeof(TNOD));
    if(last == NULL){
        nextNode->class = classNr;
        switch(classNr) {
            case 1: nextNode->hp = 65;break;
            case 4: nextNode->hp = 40;break;
            default: nextNode->hp = 50;break;}
        nextNode->key = keyIndex; keyIndex++;
        nextNode->ability = 1;
        nextNode->next = nextNode;
        last = nextNode;
    } else{
        nextNode->class = RNG(4);
        switch(nextNode->class) {
            case 1: nextNode->hp = 65;break;
            case 4: nextNode->hp = 40;break;
            default: nextNode->hp = 50;break;}
        nextNode->key = keyIndex; keyIndex++;
        nextNode->ability = 1;
        nextNode->next = last->next;
        last->next = nextNode;
        last = nextNode;
    }
}
void deleteNode(int key) {
    TNOD *temp, *position;
    if (key == 1) {
        temp = last;
        position = temp->next;
        temp->next = position->next;
        free(position);
    }else{
        temp = last->next;
        for (int i = 1; i < key - 1; i++)
            temp = temp->next;
        position = temp->next;
        temp->next = position->next;
        free(position);
    }
}
void showInfo(){
    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    printf("                                                                        \n");
    printf("                                ROASTED!                                \n");
    printf("                   (based on traditional game Fripta)                   \n");
    printf("                                                                        \n");
    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    printf("                                                                        \n");
    printf("    The rules are simple: Choose the power of your strike and watch your\n");
    printf("enemies perish! Each Player Strikes the one next to him, until only one \n");
    printf("reigns victorious as the King of Roasts!                                \n");
    printf("                                                                        \n");
    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    printf("                                                                        \n");
    printf("                        Strike power range: 1 - 10                      \n");
    printf("               Higher the power, higher the chance to miss!             \n");
    printf("                        Abilities are one-time use!                     \n");
    printf("               A turn can either be a Strike or an Ability!             \n");
    printf("                                                                        \n");
    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    printf("                                                                        \n");
    printf("                           Choose your class:                           \n");
    printf("   FIGHTER(1)                                                           \n");
    printf("   PASSIVE: +15 HP;                                                     \n");
    printf("   ABILITY: Taunts his enemy and deals +7 DMG on his next attack;       \n");
    printf("                                                                        \n");
    printf("   ARCHER(2)                                                            \n");
    printf("   PASSIVE: 20%% Critical Chance (2x DMG);                              \n");
    printf("   ABILITY: Attack any enemy with a guaranteed Critical Strike;         \n");
    printf("                                                                        \n");
    printf("   THIEF(3)                                                             \n");
    printf("   PASSIVE: 50%% for a second, weaker strike (+3 DMG);                  \n");
    printf("   ABILITY: Catch your breath and heal 10 HP;                           \n");
    printf("                                                                        \n");
    printf("   WIZARD(4)                                                            \n");
    printf("   PASSIVE: -10 HP, but you deal 3 more DMG on every Strike;            \n");
    printf("   ABILITY: 30%% chance to cast a fireball that deals 100 DMG;          \n");
    printf("                                                                        \n");
    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    printf("                                                                        \n");
}
void showPlayers(){
    TNOD *currentNode = last->next;
    printf("                                                                        \n");
    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    printf("                                                                        \n");
    do{
        if(currentNode->key == 1)
            switch(currentNode->class){
                case 1:printf("   Player 1: YOU                HP: %d                Class: FIGHTER   \n",
                              currentNode->hp);break;
                case 2:printf("   Player 1: YOU                HP: %d                Class: ARCHER    \n",
                              currentNode->hp);break;
                case 3:printf("   Player 1: YOU                HP: %d                Class: THIEF     \n",
                              currentNode->hp);break;
                case 4:printf("   Player 1: YOU                HP: %d                Class: WIZARD    \n",
                              currentNode->hp);break;}
        else
            switch(currentNode->class){
                case 1:printf("   Player %d: CPU                HP: %d                Class: FIGHTER\n",
                              currentNode->key, currentNode->hp);break;
                case 2:printf("   Player %d: CPU                HP: %d                Class: ARCHER\n",
                              currentNode->key, currentNode->hp);break;
                case 3:printf("   Player %d: CPU                HP: %d                Class: THIEF\n",
                              currentNode->key, currentNode->hp);break;
                case 4:printf("   Player %d: CPU                HP: %d                Class: WIZARD\n",
                              currentNode->key, currentNode->hp);break;
            }
        currentNode = currentNode->next;
    }while(currentNode->key != last->next->key);

}
int gameRound(){
    TNOD *currentNode = last->next;

    showPlayers();
    int ability;
    int power;
    int position;

    //PLAYER ACTION
    if(currentNode->ability == 0){
        printf("\n   You already used your Ability! Press [SPACE] to Strike!\n");
        getch();
        printf("   Enter your desired power (1-10): ");
        scanf("%d", &power);
        if (RNG(30) < 30 - power) {
            switch(currentNode->class) {
                case 1:{
                    currentNode->next->hp = currentNode->next->hp - power;
                    printf("\n   You struck Player %d for %d DMG! [SPACE]\n", currentNode->next->key, power);
                    getch();
                }break;
                case 2:{
                    if (RNG(10) <= 2) {
                        currentNode->next->hp = currentNode->next->hp - power * 2;
                        printf("\n   You struck Player %d for %d DMG! Critical Hit! [SPACE]\n",
                               currentNode->next->key, (power * 2));
                        getch();
                    } else {
                        currentNode->next->hp = currentNode->next->hp - power;
                        printf("\n   You struck Player %d for %d DMG! [SPACE]\n", currentNode->next->key, power);
                        getch();
                    }
                }break;
                case 3:{
                    if (RNG(2) == 1) {
                        currentNode->next->hp = currentNode->next->hp - power - 4;
                        printf("\n   You quickly struck Player %d twice for %d DMG! [SPACE]\n",
                               currentNode->next->key, (power + 4));
                        getch();
                    } else {
                        currentNode->next->hp = currentNode->next->hp - power;
                        printf("\n   You struck Player %d for %d DMG! [SPACE]\n", currentNode->next->key, power);
                        getch();
                    }
                }break;
                case 4:{
                    currentNode->next->hp = currentNode->next->hp - power - 3;
                    printf("\n   You struck Player %d for %d DMG! [SPACE]\n", currentNode->next->key, (power + 3));
                    getch();
                }break;
            }
            if (currentNode->next->hp <= 0) {
                printf("   Player %d fainted! [SPACE]\n", currentNode->next->key);
                deleteNode(currentNode->next->key);
                getch();
            }
        }else{
            printf("\n   You missed the hit! [SPACE]\n");
            getch();
        }
    }
    if(currentNode->ability == 1){
        printf("\n   Press [ZERO] to use your Ability or [SPACE] to Strike!\n");
        ability = getch();
        if (ability == '0'){
            printf("\n   You used your ability!\n");
            currentNode->ability = 0;
            switch (currentNode->class){
                case 1:{
                    printf("   Enter your desired power (1-10): ");
                    scanf("%d", &power);
                    if(RNG(30) < (30 - power)){
                        currentNode->next->hp = currentNode->next->hp - power - 7;
                        printf("\n   You taunted Player %d and hit them for %d DMG! [SPACE]\n",
                               currentNode->next->key, (power + 7));
                        if (currentNode->next->hp <= 0) {
                            printf("   Player %d fainted! [SPACE]\n", currentNode->next->key);
                            deleteNode(currentNode->next->key);
                        }
                        getch();
                    }else{
                        printf("\n   Your sweaty hands missed the hit! [SPACE]\n");
                        getch();
                    }
                }break;
                case 2:{
                    printf("   Enter your desired power (1-10): ");
                    scanf("%d", &power);
                    printf("\n   Choose an enemy to attack: ");
                    scanf("%d", &position);
                    TNOD *temp = currentNode;
                    while (temp->key != position){
                        temp = temp->next;
                    }
                    if (RNG(30) < (30 - power)) {
                        temp->hp = temp->hp - power * 2;
                        printf("\n   You sniped Player %d for %d DMG! [SPACE]\n", temp->key, (power * 2));
                        if (temp->hp <= 0) {
                            printf("\n   Player %d fainted! [SPACE]\n", temp->key);
                            deleteNode(temp->key);
                        }
                        getch();
                    } else {
                        printf("\n   Your hand slipped and the arrow missed! [SPACE]\n");
                        getch();
                    }
                }break;
                case 3:{
                    currentNode->hp = currentNode->hp + 10;
                    printf("   You catch your breath and heal for 10 HP! [SPACE]\n");
                    getch();
                }break;
                case 4:{
                    printf("   Choose an enemy to attack: ");
                    scanf("%d", &position);
                    TNOD *temp = currentNode;
                    while (temp->key != position) {
                        temp = temp->next;
                    }
                    if (RNG(100) <= 30) {
                        printf("\n   Your Fireball burnt Player %d for 100 DMG! [SPACE]\n", temp->key);
                        printf("\n   Player %d fainted! [SPACE]", temp->key);
                        deleteNode(temp->key);
                        getch();
                    }else{
                        printf("\n   Your staff snapped in half! [SPACE]\n");
                        getch();
                    }
                }break;
            }
        }
        if (ability != '0') {
            printf("   Enter your desired power (1-10): ");
            scanf("%d", &power);
            if (RNG(20) < 20 - power) {
                switch(currentNode->class) {
                    case 1:{
                        currentNode->next->hp = currentNode->next->hp - power;
                        printf("\n   You struck Player %d for %d DMG! [SPACE]\n",
                               currentNode->next->key, power);
                        getch();
                    }break;
                    case 2:{
                        if (RNG(10) <= 2) {
                            currentNode->next->hp = currentNode->next->hp - power * 2;
                            printf("\n   You struck Player %d for %d DMG! Critical Hit! [SPACE]\n",
                                   currentNode->next->key, (power * 2));
                            getch();
                        } else {
                            currentNode->next->hp = currentNode->next->hp - power;
                            printf("\n   You struck Player %d for %d DMG! [SPACE]\n",
                                   currentNode->next->key, power);
                            getch();
                        }
                    }break;
                    case 3:{
                        if (RNG(2) == 1) {
                            currentNode->next->hp = currentNode->next->hp - power - 4;
                            printf("\n   You quickly struck Player %d twice for %d DMG! [SPACE]\n",
                                   currentNode->next->key, (power + 4));
                            getch();
                        } else {
                            currentNode->next->hp = currentNode->next->hp - power;
                            printf("\n   You struck Player %d for %d DMG! [SPACE]\n",
                                   currentNode->next->key, power);
                            getch();
                        }
                    }break;
                    case 4:{
                        currentNode->next->hp = currentNode->next->hp - power - 3;
                        printf("\n   You struck Player %d for %d DMG! [SPACE]\n",
                               currentNode->next->key, (power + 3));
                        getch();
                    }break;
                }
                if (currentNode->next->hp <= 0) {
                    printf("\n   Player %d fainted! [SPACE]\n", currentNode->next->key);
                    deleteNode(currentNode->next->key);
                }
            }else{
                printf("\n   You missed the hit! [SPACE]\n");
                getch();
            }
        }
    }
    currentNode = currentNode->next;

    //CPU ACTION
    do{
        if(currentNode->ability == 0){
            power = RNG(10);
            if (RNG(20) <= 20 - power) {
                switch(currentNode->class) {
                    case 1:{
                        currentNode->next->hp = currentNode->next->hp - power;
                        printf("\n   Player %d struck Player %d for %d DMG! [SPACE]\n",
                               currentNode->key, currentNode->next->key, power);
                        getch();
                    }break;
                    case 2:{
                        if (RNG(10) <= 2) {
                            currentNode->next->hp = currentNode->next->hp - power * 2;
                            printf("\n   Player %d struck Player %d for %d DMG! Critical Hit! [SPACE]\n",
                                   currentNode->key, currentNode->next->key, (power * 2));
                            getch();
                        } else {
                            currentNode->next->hp = currentNode->next->hp - power;
                            printf("\n   Player %d struck Player %d for %d DMG! [SPACE]\n",
                                   currentNode->key, currentNode->next->key, power);
                            getch();
                        }
                    }break;
                    case 3:{
                        if (RNG(2) == 1) {
                            currentNode->next->hp = currentNode->next->hp - power - 4;
                            printf("\n   Player %d quickly struck Player %d twice for %d DMG! [SPACE]\n",
                                   currentNode->key, currentNode->next->key, (power + 4));
                            getch();
                        } else {
                            currentNode->next->hp = currentNode->next->hp - power;
                            printf("\n   Player %d struck Player %d for %d DMG! [SPACE]\n",
                                   currentNode->key, currentNode->next->key, power);
                            getch();
                        }
                    }break;
                    case 4:{
                        currentNode->next->hp = currentNode->next->hp - power - 3;
                        printf("\n   Player %d struck Player %d for %d DMG! [SPACE]\n",
                               currentNode->key, currentNode->next->key, (power + 3));
                        getch();
                    }break;
                }
            if (currentNode->next->hp <= 0) {
                 printf("\n   Player %d fainted! [SPACE]\n", currentNode->next->key);
                 deleteNode(currentNode->next->key);
                 getch();
            }
            }else{
                printf("\n   Player %d missed the hit! [SPACE]\n", currentNode->key);
                getch();
            }
        }
        if(currentNode->ability == 1){
            if(RNG(10) <= 5) {
                currentNode->ability = 0;
                switch(currentNode->class){
                    case 1:{
                        power = RNG(10);
                        if(RNG(20) <= 20 - power){
                            currentNode->next->hp = currentNode->next->hp - power - 7;
                            printf("\n   Player %d taunted Player %d and hit them for %d DMG! [SPACE]\n",
                                   currentNode->key, currentNode->next->key, (power + 7));
                            if (currentNode->next->hp < 0) {
                                printf("Player %d fainted! [SPACE]\n", currentNode->next->key);
                                deleteNode(currentNode->next->key);
                            }
                            getch();
                        }else{
                            printf("\n   Player %d's sweaty hands missed the hit! [SPACE]\n",
                                   currentNode->key);
                            getch();
                        }
                    }break;
                    case 2:{
                        power = RNG(10);
                        if (RNG(20) <= 20 - power) {
                            currentNode->next->hp = currentNode->next->hp - power * 2;
                            printf("\n   Player %d sniped Player %d for %d DMG! [SPACE]\n", currentNode->key, currentNode->next->key,
                                   (power * 2));
                            if (currentNode->next->hp < 0) {
                                printf("Player %d fainted!", currentNode->next->key);
                                deleteNode(currentNode->next->key);
                            }
                            getch();
                        }else{
                            printf("\n   Player %d's bow slipped and the arrow missed! [SPACE]\n",
                                   currentNode->key);
                            getch();
                        }
                    }break;
                    case 3:{
                        currentNode->hp = currentNode->hp + 10;
                        printf("\n   Player %d catches his breath and heals for 10HP! [SPACE]\n",
                               currentNode->key);
                        getch();
                    }break;
                    case 4:{
                        if(RNG(10) <= 2) {
                            printf("\n   Player %d fireballed Player %d for 100 DMG! [SPACE]\n",
                                   currentNode->key, currentNode->next->key);
                            printf("   Player %d fainted! [SPACE]\n", currentNode->next->key);
                            deleteNode(currentNode->next->key);
                            getch();
                        } else {
                            printf("\n   Player %d's staff snapped in two! [SPACE]\n", currentNode->key);
                            getch();
                        }
                    }break;
                }
            }else{
                power = RNG(10);
                if (RNG(20) <= 20 - power) {
                    switch(currentNode->class) {
                        case 1:{
                            currentNode->next->hp = currentNode->next->hp - power;
                            printf("\n   Player %d struck Player %d for %d DMG! [SPACE]\n",
                                   currentNode->key, currentNode->next->key, power);
                            getch();
                        }break;
                        case 2:{
                            if (RNG(10) <= 2) {
                                currentNode->next->hp = currentNode->next->hp - power * 2;
                                printf("\n   Player %d struck Player %d for %d DMG! Critical Hit! [SPACE]\n",
                                       currentNode->key, currentNode->next->key, (power * 2));
                                getch();
                            } else {
                                currentNode->next->hp = currentNode->next->hp - power;
                                printf("\n   Player %d struck Player %d for %d DMG! [SPACE]\n",
                                       currentNode->key, currentNode->next->key, power);
                                getch();
                            }
                        }break;
                        case 3:{
                            if (RNG(2) == 1) {
                                currentNode->next->hp = currentNode->next->hp - power - 4;
                                printf("\n   Player %d quickly struck Player %d twice for %d DMG! [SPACE]\n",
                                       currentNode->key, currentNode->next->key, (power + 4));
                                getch();
                            } else {
                                currentNode->next->hp = currentNode->next->hp - power;
                                printf("\n   Player %d struck Player %d for %d DMG! [SPACE]\n",
                                       currentNode->key, currentNode->next->key, power);
                                getch();
                            }
                        }break;
                        case 4:{
                            currentNode->next->hp = currentNode->next->hp - power - 3;
                            printf("\n   Player %d struck Player %d for %d DMG! [SPACE]\n",
                                   currentNode->key, currentNode->next->key, (power + 3));
                            getch();
                        }break;
                    }
                    if (currentNode->next->hp <= 0) {
                        printf("   Player %d fainted! [SPACE]\n", currentNode->next->key);
                        deleteNode(currentNode->next->key);
                        getch();
                    }
                }else{
                    printf("\n   Player %d missed the hit! [SPACE]\n", currentNode->key);
                    getch();
                }
            }
        }

        currentNode = currentNode->next;
    }while(currentNode != last->next);

    if(currentNode->next->key == currentNode->key == 1){
        printf("\nYOU WON! [SPACE to EXIT]");
        getch();
        return 1;
    }
    if(currentNode->key != 1){
        printf("\nYOU DIED! [SPACE to EXIT]");
        getch();
        return 1;
    }

    return 0;
}
